package sqlg2;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation marking that annotated class is a Java representation of a database
 * row (analogous of %ROWTYPE in PL/SQL).
 * Preprocessor generates getter methods and implementations for such classes
 * to provide access to database row fields.
 * <p>
 * Annotation can be applied to:
 * <ul>
 * <li>Nested static abstract classes or interfaces. Row type class implementation is generated by preprocessor
 * separately.
 * <li>Top level non-abstract classes. Getters are generated right in the body of class.
 * </ul>
 * <p>
 * Example 1 - nested classes usage:
 * <pre>
 * &#64;SQLG
 * public class Test extends GBase {
 *
 *     &#64;RowType
 *     public abstract static class DataRow {
 *         ...
 *     }
 *
 *     &#64;RowType
 *     public interface ValueRow {
 *         ...
 *     }
 * }
 * </pre>
 * Example 2 - top-level classes usage:
 * <pre>
 * &#64;RowType
 * public class DataRow {
 *     ...
 * }
 * </pre>
 * In both cases whole body of class is overwritten by preprocessor, but additional annotations/extends/implements
 * are left as is.
 */
@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.TYPE)
public @interface RowType {
}
