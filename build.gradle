allprojects {
    group = 'com.github.osobolev.sqlg2'
    version = '4.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    targetCompatibility = '1.5'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jar {
        manifest {
            attributes('Implementation-Version': version)
        }
    }

    javadoc {
        onlyIf {
            project.name == 'sqlg2-full'
        }

        destinationDir = file("${rootProject.projectDir}/doc/api")

        include(['sqlg2/GBase.java', 'sqlg2/Parameter.java', 'sqlg2/SqlChecker.java',
                 'sqlg2/Business.java', 'sqlg2/BusinessNoSql.java',  'sqlg2/CheckParams.java', 
                 'sqlg2/EditableRowType.java', 'sqlg2/RowType.java', 'sqlg2/Prepare.java', 'sqlg2/PrepareKey.java', 
                 'sqlg2/Sql.java', 'sqlg2/Query.java', 'sqlg2/Call.java', 'sqlg2/SQLG.java', 
                 'sqlg2/Mapper.java', 'sqlg2/ColumnInfo.java'])
        include 'sqlg2/db/**'
        exclude(['sqlg2/db/Impl.java', 'sqlg2/db/RowTypeFactory.java', 'sqlg2/db/Caches.java', 'sqlg2/db/HttpDispatcher.java', 
                 'sqlg2/db/InternalTransaction.java', 'sqlg2/db/QueryReplacer.java'])
        include 'sqlg2/checker/**'
        exclude 'sqlg2/db/remote/**'
        exclude 'sqlg2/db/server/**'
        exclude 'sqlg2/lexer/**'
        exclude 'sqlg2/queries/**'
    }
}

def buildSource(projects) {
    def sd = ['src']
    projects.each { 
        sd.add("$rootProject.projectDir/modules/$it/src")
    }
    sd
}

project(':sqlg2-client') {
    sourceSets.main.java.srcDirs = buildSource(['core', 'remote-common', 'remote-client'])
}

project(':sqlg2-full') {
    
    sourceSets.main.java.srcDirs = buildSource(['core', 'runtime', 'remote-common', 'server-common', 'remote-server', 'remote-client', 'local-server', 'preprocess'])

    configurations { antlrLib }

    dependencies {
        compileOnly files('lib/antlr-runtime.jar')
        compileOnly 'org.apache.ant:ant:1.9.5'
        antlrLib 'antlr:antlr:2.7.7'
    }
    
    jar {
        from zipTree('lib/antlr-runtime.jar')
    }

    task lexer(type: JavaExec) {
        main = 'antlr.Tool'
        classpath = configurations.antlrLib
        args '-o', 'src/sqlg2/lexer', 'grammar/java15.g'
    }
}

project(':sqlg2-local') {
    sourceSets.main.java.srcDirs = buildSource(['core', 'runtime', 'server-common', 'local-server'])
}

project(':sqlg2-runtime') {
    sourceSets.main.java.srcDirs = buildSource(['core', 'runtime', 'remote-common', 'server-common', 'remote-server', 'remote-client', 'local-server'])
}

project(':sqlg2-gwt') {
    compileJava { onlyIf { false } }

    jar {
        into ('sqlg2') {
            def dir = "${rootProject.projectDir}/modules/preprocess/src/sqlg2"
            from(["${dir}/RowType.java", "${dir}/EditableRowType.java", "src/sqlg2/SQLG.gwt.xml"])
        }
    }
}

project(':') {

    task build(type: Copy, dependsOn: subprojects.jar) {
        from subprojects.jar
        into 'lib'
    }

    task install(dependsOn: build) {
    }
    
    task clean(type: Delete) {
        delete 'lib'
        delete 'distr'
        delete 'doc/api'
    }

    task cleanExamples (type: GradleBuild) {
        buildFile = file('doc/examples/build.gradle')
        tasks = ['clean']
    }

    task binDistr(type: Zip, dependsOn: [build, project(':sqlg2-full').javadoc, cleanExamples]) {
        baseName = "sqlg2-bin-${project.version}"
        destinationDir = file('distr')
        from '.'
        include 'lib/**'
        include 'doc/**'
    }

    task srcDistr(type: Zip, dependsOn: [build, project(':sqlg2-full').javadoc, cleanExamples]) {
        baseName = "sqlg2-src-${project.version}"
        destinationDir = file('distr')
        from '.'
        include 'doc/**'
        include 'modules/**'
        exclude 'modules/**/build/**'
        include 'build.gradle'
        include 'settings.gradle'
    }

    task distr(dependsOn: [binDistr, srcDistr])
}
